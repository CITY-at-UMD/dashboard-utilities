{"version":3,"file":"index.js","sources":["../src/utilities.js","../src/meters.js","../src/index.js"],"sourcesContent":["import {\n  mean,\n  interquartileRange,\n  quantile,\n  min,\n  max,\n  sum,\n  medianAbsoluteDeviation,\n  modeSorted,\n  medianSorted,\n  uniqueCountSorted,\n  variance,\n  standardDeviation\n} from \"simple-statistics\";\nimport {\n  subYears,\n  getYear,\n  format,\n  addMinutes,\n  addHours,\n  addDays,\n  addMonths,\n  addYears,\n  subMonths,\n  startOfMonth,\n  startOfDay,\n  startOfYear,\n  endOfYear,\n  endOfMonth,\n  endOfDay,\n  differenceInYears,\n  parse,\n  getHours,\n  getMinutes,\n  setHours,\n  setMinutes,\n  setSeconds\n} from \"date-fns\";\nconst { groupBy } = require(\"lodash\");\n// Conversions\nconst conversionFactors = {\n  electricity: {\n    energy: 3.4121416331, // kWh to kBtu\n    cost: 0.111, //$/kWh,\n    emissions: 0.53 //CO2e\n  },\n  steam: {\n    energy: 1.19, // lbs to kBtu,\n    cost: 0.0255, //$/lbs,\n    emissions: 0.1397 //CO2e\n  },\n  hw: {\n    energy: 1, // kBtu to kBtu,\n    cost: 0, //$/kBtu,\n    emissions: 0 //CO2e\n  },\n  water: {\n    energy: 0, // gals to kBtu,\n    cost: 0.019, //$/gal,\n    emissions: 0 //CO2e\n  },\n  chw: {\n    energy: 12, // TonHrs to kBtu,\n    cost: 0.186, //$/TonHr,\n    emissions: 0 //CO2e\n  },\n  ng: {\n    energy: 99.9761, // therm to kBtu,\n    cost: 0, //$/kWh,\n    emissions: 11.7 //therm to lbs CO2e\n  }\n};\nconst convert = (value, meterType, to) => {\n  return value * conversionFactors[meterType][to];\n};\n// Buildings and Meters\nconst units = {\n  electricity: [\"kWh\", \"MWh\", \"MJ\", \"kW\"],\n  steam: [\"lbs\", \"kBtu\", \"btu\"],\n  chw: [\"ton-hr\", \"kBtu\", \"btu\"],\n  ng: [\"therm\", \"ccf\", \"mcf\", \"kBtu\"],\n  oil: [\"gals\", \"barallel\", \"kBtu\", \"btu\"],\n  water: [\"gals\"]\n};\n\n// Formatting\nconst capFirst = (string = \"\") =>\n  string.replace(\n    /\\w\\S*/g,\n    txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  );\nconst replaceAll = (string = \"\", search, replacement) =>\n  string.replace(new RegExp(search, \"g\"), replacement);\nconst stringifyID = id =>\n  id < 10 ? `00${id}` : id < 100 ? `0${id}` : String(id);\nconst formatNumber = number =>\n  isNaN(number) ? \"0\" : parseInt(Math.round(number), 10).toLocaleString();\nconst formatFloat = number =>\n  isNaN(number) ? \"0\" : parseFloat(number).toLocaleString();\nconst formatPercent = number =>\n  isNaN(number) ? \"0\" : formatNumber(number * 100);\nconst toURLQuery = obj =>\n  \"?\".concat(\n    Object.keys(obj)\n      .map(k => [k, obj[k]].join(\"=\"))\n      .join(\"&\")\n  );\nconst parseQueryParams = query =>\n  new Map(\n    query\n      .replace(\"?\", \"\")\n      .split(\"&\")\n      .map(s => s.split(\"=\"))\n  );\n//Map\nconst calcScale = (values, units = \"\") => {\n  values = values.filter(v => v > 0);\n  if (values.length < 1) return { low: 1, high: 2, max: 3 };\n  return {\n    low: parseInt(quantile(values, 0.5), 10),\n    high: parseInt(quantile(values, 0.75), 10),\n    max: parseInt(max(values), 10),\n    units\n  };\n};\nconst chooseIcon = (basename, { low, high }, value) => {\n  let icon = `${basename}-err`;\n  if (!value || !low || !high) return icon;\n  value <= low\n    ? (icon = `${basename}-low`)\n    : value <= high ? (icon = `${basename}-med`) : (icon = `${basename}-high`);\n  return icon;\n};\n//Charting Functions\nconst timeseriesToXY = (data, scale = 1) =>\n  data.map(v => ({\n    x: new Date(v[0]),\n    y: v[1] / scale\n  }));\n// General Functions & Adjustments\nconst calcProgress = (value, baseline) => (value - baseline) / baseline;\nconst normalize = (x, min, max) => (x - min) / (max - min);\nconst normalizeBack = (x, min, max) => x * (max - min) + min;\nconst euiTimeScaler = (startDate, endDate) => {\n  if (isNaN(startDate)) {\n    startDate = new Date(startDate).valueOf();\n  }\n  if (isNaN(endDate)) {\n    endDate = new Date(endDate).valueOf();\n  }\n  let msyear = 31557600000; // 365.25 days\n  return msyear / (endDate - startDate);\n};\nconst validEmail = string => {\n  let nr = new RegExp(\n    // eslint-disable-next-line\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  );\n  return Boolean(string.match(nr));\n};\n// Statistics\nconst calcCVRMSE = (actual, simulated) => {\n  var diffArray = [],\n    actualValues = [];\n  for (var i in actual) {\n    diffArray.push(Math.pow(actual[i] - simulated[i], 2));\n    actualValues.push(actual[i]);\n  }\n  var n = diffArray.length,\n    p = 1.0;\n  var ybar = sum(actualValues) / actualValues.length;\n  var cvrmse = Math.sqrt(sum(diffArray) / (n - p)) / ybar;\n  return cvrmse * 100;\n};\nconst calcNMBE = (actual, simulated) => {\n  var diffArray = [],\n    actualValues = [];\n  for (var i in actual) {\n    diffArray.push(actual[i] - simulated[i]);\n    actualValues.push(actual[i]);\n  }\n  var n = diffArray.length,\n    p = 1.0;\n  var ybar = sum(actualValues) / actualValues.length;\n  var nmbe = sum(diffArray) / ((n - p) * ybar);\n  return nmbe * 100;\n};\nconst dataStatistics = (values, filterZero = false) => {\n  if (filterZero) {\n    values = values.filter(v => v > 0);\n  }\n  if (values.length < 2) {\n    // throw new Error('Not Enough Values')\n    return {};\n  }\n  values = values.sort();\n  let iq = interquartileRange(values),\n    q1 = quantile(values, 0.25),\n    q3 = quantile(values, 0.75),\n    lowerInnerFence = q1 - 1.5 * iq,\n    lowerOuterFence = q3 - 3 * iq,\n    upperInnerFence = q1 + 1.5 * iq,\n    upperOuterFence = q3 + 3 * iq;\n  return {\n    iq,\n    q1,\n    q3,\n    lowerInnerFence,\n    lowerOuterFence,\n    upperInnerFence,\n    upperOuterFence,\n    min: min(values),\n    max: max(values),\n    mean: mean(values),\n    mode: modeSorted(values),\n    median: medianSorted(values),\n    medianAbsoluteDeviation: medianAbsoluteDeviation(values),\n    uniqueCountSorted: uniqueCountSorted(values),\n    standardDeviation: standardDeviation(values),\n    variance: variance(values)\n  };\n};\nconst boxPlot = (values, filterZero = false) => {\n  if (filterZero) {\n    values = values.filter(v => v > 0);\n  }\n  if (values.length < 2) {\n    throw new Error(\"not enough values\");\n  }\n  let q1 = quantile(values, 0.25),\n    q3 = quantile(values, 0.75),\n    minVal = min(values),\n    maxVal = max(values);\n  return {\n    q1,\n    q3,\n    min: minVal,\n    max: maxVal\n  };\n};\n\n// Dates\nconst intervalStart = (date, interval) => {\n  //Supported Intervals: day, month, year\n  let t;\n  switch (interval) {\n    case \"day\":\n      t = startOfDay(date);\n      break;\n    case \"month\":\n      t = startOfMonth(date);\n      break;\n    default:\n      t = startOfYear(date);\n  }\n  return t.valueOf();\n};\nconst dateRange = (startDate, endDate, interval, step = 1) => {\n  // Supported Inervals: minutes,hour,day, month, year\n  startDate = parse(startDate);\n  endDate = parse(endDate);\n  let range = [startDate];\n  if (startDate >= endDate) return [];\n  while (range[range.length - 1].valueOf() < endDate.valueOf()) {\n    let d;\n    switch (interval) {\n      case \"minute\":\n        d = addMinutes(range[range.length - 1], step);\n        break;\n      case \"hour\":\n        d = addHours(range[range.length - 1], step);\n        break;\n      case \"day\":\n        d = addDays(range[range.length - 1], step);\n        break;\n      case \"month\":\n        d = addMonths(range[range.length - 1], step);\n        break;\n      default:\n        d = addYears(range[range.length - 1], step);\n    }\n    range.push(d);\n  }\n  return range;\n};\n\n// Timeseries [[dateTime, value, origionalValue], ...]\n// Stats\nconst minTimeseries = ts => min(ts.map(v => v[1]));\nconst maxTimeseries = ts => max(ts.map(v => v[1]));\nconst maxTimeseriesWithDate = ts => ts.sort((a, b) => b[1] - a[1])[0];\nconst cardinalityTimeseries = ts => new Set(ts.map(v => v[1])).size;\nconst getFirstTimestamp = ts => new Date(min(ts.map(v => v[0])));\nconst getLastTimestamp = ts => new Date(max(ts.map(v => v[0])));\n// Reduce\nconst reduceTimeseries = (...arrays) =>\n  [\n    ...arrays.map(a => new Map(a)).reduce((a, b) => {\n      for (var date of b.keys()) {\n        a.has(date)\n          ? a.set(date, b.get(date) + a.get(date))\n          : a.set(date, b.get(date));\n      }\n      return a;\n    }, new Map())\n  ].sort((a, b) => a[0] - b[0]);\n// Cleaning\nconst cleanTimeseries = (data, replacement, min, max) => {\n  data = data.map(\n    v => (v[1] > max || v[1] < min ? [v[0], replacement, v[1]] : v)\n  );\n  return data;\n};\nconst uncleanTimeseries = data => data.map(r => (r[2] ? [r[0], r[2]] : r));\nconst interpolateTimeseries = (array, index) => {\n  let prevIndex = index - 1 < 0 ? 0 : index - 1;\n  let prev = array\n    .slice(0, prevIndex)\n    .filter(v => v[1])\n    .reverse()[0];\n  let next = array.slice(index + 1).filter(v => v[1])[0];\n  return ((prev ? prev[1] : 0) + (next ? next[1] : 0)) / 2;\n};\nconst cleanTimeseriesInterpolate = (data, min, max) => {\n  data = data\n    .map(v => (isNaN(v[1]) ? [v[0], 0, v[1]] : v))\n    .map(v => (v[1] < min ? [v[0], null, v[1]] : v)) //min\n    .map(v => (v[1] > max ? [v[0], null, v[1]] : v)) //max\n    .map((v, i, array) => {\n      if (!v[1]) {\n        let avg = interpolateTimeseries(array, i);\n        return [v[0], avg, v[2]];\n      } else {\n        return v;\n      }\n    }); //interpolate\n  return data;\n};\n// Filtering\nconst filterTimeseries = (data, startDate, endDate) =>\n  data.filter(t => t[0] >= startDate && t[0] <= endDate);\n// Mapping\nconst valuesTimeseries = data => data.map(v => v[1]);\n// Pre Allocate\nconst preAllocateTimeseriesMinutes = () => {\n  let o = {};\n  for (var h = 0; h < 24; h++) {\n    o[h] = {};\n    for (var m = 0; m < 60; m++) {\n      o[h][m] = null;\n    }\n  }\n  return o;\n};\n// const preAllocateTimeseriesSeconds = () => {\n//   let o = {};\n//   for (var h = 0; h < 24; h++) {\n//     o[h] = {};\n//     for (var m = 0; m < 60; m++) {\n//       o[h][m] = {};\n//       for (var s = 0; s < 60; s++) {\n//         o[h][m][s] = null;\n//       }\n//     }\n//   }\n//   return o;\n// };\n// Transform\nconst TimeseriesArrayToObject = data => {\n  let days = groupTimeseries(data, \"day\").map(([day, ts]) => {\n    let obj = preAllocateTimeseriesMinutes();\n    for (var x = 0; x < ts.length; x++) {\n      let hr = getHours(ts[x][0]),\n        m = getMinutes(ts[x][0]);\n      obj[hr][m] = ts[x][1];\n    }\n    return [day, obj];\n  });\n  return days;\n};\nconst TimeseriesObjectToArray = (data, timestamp) => {\n  let array = Object.keys(data)\n    .map(h =>\n      Object.keys(data[h]).map(m =>\n        Object.keys(\n          data[h][m].map(s => [\n            setHours(setMinutes(setSeconds(timestamp, s), m), h),\n            data[h][m]\n          ])\n        )\n      )\n    )\n    .reduce((a, b) => a.concat(b))\n    .sort((a, b) => a[0].valueOf() - b[0].valueOf());\n  return array;\n};\n// Grouping\nconst groupTimeseriesDay = ts =>\n  Object.entries(groupBy(ts, v => startOfDay(v[0]).valueOf())).map(\n    ([day, timeseries]) => [Number(day), timeseries]\n  );\nconst groupTimeseries = (data, interval) => {\n  //Supported Intervals: day, month, year\n  let group = data.map(v => [parse(v[0]).valueOf(), v[1]]).reduce((a, b) => {\n    let t = intervalStart(b[0], interval);\n    if (a.has(t)) {\n      a.set(t, [...a.get(t), b]);\n    } else {\n      a.set(t, [b]);\n    }\n    return a;\n  }, new Map());\n  return [...group];\n};\n// Aggregation\nconst aggregateTimeSeries = (data, interval) => {\n  //Supported Intervals: day, month, year\n  let red = data.map(v => [parse(v[0]), v[1]]).reduce((a, b) => {\n    let ts = intervalStart(b[0], interval);\n    if (!a.has(ts)) {\n      a.set(ts, b[1]);\n    } else {\n      a.set(ts, a.get(ts) + b[1]);\n    }\n    return a;\n  }, new Map());\n  data = [...red].map(v => [new Date(v[0]).valueOf(), v[1]]);\n  return data;\n};\nconst totalTimeseries = data => data.map(a => a[1]).reduce((a, b) => a + b, 0);\nconst averageTimeseries = data => mean(data.map(v => v[1]));\nconst monthlyValueWithTrend = (data, units, month, baseline) => {\n  let dm = new Map(data);\n  if (!dm.has(month.valueOf())) {\n    return { value: 0, trend: { value: null, text: \"\" } };\n  }\n  let value = dm.get(month.valueOf()),\n    baselineValue = dm.get(baseline.valueOf()) || 0;\n  return {\n    value,\n    units,\n    trend: {\n      value: calcProgress(value, baselineValue) * 100,\n      text: `${format(baseline, \"MMM YYYY\")}`\n    }\n  };\n};\n// ETC\nconst isTimeseriesUniform = data => cardinalityTimeseries(data) < 3;\nconst makeDailyTimeseries = (date, value, interval, step) => {\n  let range = dateRange(date, endOfDay(date), interval);\n  let data = range.map((d, i, arr) => [d.valueOf(), value / arr.length]);\n  return data;\n};\nconst findMissingDays = (data, { startDate, endDate } = {}) => {\n  // Sort Data\n  data = data.sort((a, b) => a[0] - b[0]);\n  // Set Default Start Dates\n  if (!startDate) {\n    startDate = data[0][0];\n  }\n  if (!endDate) {\n    endDate = data[data.length - 1][0];\n  }\n  let range = dateRange(startDate, endDate, \"day\");\n  let fullTs = new Set(range.map(d => d.valueOf()));\n  let dataDates = new Set(data.map(d => d[0]));\n  let missing = new Set([...fullTs].filter(d => !dataDates.has(d)));\n  return [...missing];\n};\n\n// Energy\nconst calcMeterTotal = (data, type, startDate, endDate, limit = []) => {\n  let total = Object.keys(data)\n    .filter(k => limit.indexOf(k) === -1)\n    .filter(k => conversionFactors.hasOwnProperty(k) && data[k].length > 0)\n    .map((k, i) =>\n      filterTimeseries(data[k], startDate, endDate).map(v => [\n        v[0],\n        convert(v[1], k, type)\n      ])\n    )\n    .reduce((a, b) => reduceTimeseries(a, b), []);\n  return total;\n};\nconst calcEUI = (data, area, startDate, endDate, limit = []) => {\n  let totalEnergy = totalTimeseries(\n    calcMeterTotal(data, \"energy\", startDate, endDate, limit)\n  );\n  return totalEnergy / area * euiTimeScaler(startDate, endDate);\n};\nconst calcIntensity = (\n  data,\n  type,\n  area,\n  startDate,\n  endDate,\n  limit = [],\n  btu = false\n) => {\n  if ([\"energy\", \"emissions\", \"cost\"].indexOf(type) !== -1) {\n    let totalEnergy = totalTimeseries(\n      calcMeterTotal(data, type, startDate, endDate, limit)\n    );\n    return totalEnergy / area * euiTimeScaler(startDate, endDate);\n  } else {\n    if (!data.hasOwnProperty(type)) return 0;\n    let total = totalTimeseries(\n      filterTimeseries(data[type], startDate, endDate)\n    );\n    let value = total / area * euiTimeScaler(startDate, endDate);\n    return btu ? convert(value, type, \"energy\") : value;\n  }\n};\n\nconst EUIByType = (data, area, startDate, endDate, limit = []) => {\n  let years = new Array(differenceInYears(endDate, startDate) + 1)\n    .fill(0)\n    .map((v, i) => {\n      let y = new Date(startDate.getFullYear() + i, 0);\n      return [y, startOfMonth(endOfYear(y))];\n    });\n  let byType = Object.keys(data)\n    .filter(\n      k =>\n        conversionFactors.hasOwnProperty(k) &&\n        conversionFactors[k].energy > 0 &&\n        limit.indexOf(k) === -1\n    )\n    .map((k, i) =>\n      years.map(year => {\n        let sd = year[0].valueOf();\n        let ed = year[1].valueOf();\n        if (ed > endDate.valueOf()) {\n          ed = endDate.valueOf();\n          sd = startOfMonth(subMonths(ed, 11)).valueOf();\n        }\n        let timeScaler = euiTimeScaler(sd, ed);\n        let value = convert(\n          totalTimeseries(filterTimeseries(data[k], sd, ed)) *\n            timeScaler /\n            area,\n          k,\n          \"energy\"\n        );\n        return {\n          type: k,\n          year: new Date(getYear(ed), 0).valueOf(),\n          value\n        };\n      })\n    );\n  return byType;\n};\nconst EUIByYear = (\n  data,\n  area,\n  startDate,\n  endDate,\n  limit = [],\n  baselineYear\n) => {\n  let years = new Array(differenceInYears(endDate, startDate) + 1)\n    .fill(0)\n    .map((v, i) => {\n      let y = new Date(startDate.getFullYear() + i, 0);\n      return [y, startOfMonth(endOfYear(y))];\n    });\n  let types = Object.keys(data).filter(\n    k =>\n      conversionFactors.hasOwnProperty(k) &&\n      conversionFactors[k].energy > 0 &&\n      limit.indexOf(k) === -1\n  );\n  let baseline = new Map(\n    types.map(t => [\n      t,\n      calcIntensity(\n        data,\n        t,\n        area,\n        baselineYear.valueOf(),\n        startOfMonth(endOfYear(baselineYear)).valueOf(),\n        limit,\n        true\n      )\n    ])\n  );\n  years = years.map(([start, end]) => [\n    start.valueOf(),\n    types.map(t => {\n      let value = calcIntensity(\n        data,\n        t,\n        area,\n        start.valueOf(),\n        end.valueOf(),\n        limit,\n        true\n      );\n      return {\n        type: t,\n        progress: calcProgress(value, baseline.get(t)),\n        value\n      };\n    })\n  ]);\n  return years;\n};\nconst calcBuildingEUI = (data, area) => {\n  let eui;\n  if (!data || !area) {\n    eui = {\n      year: 0,\n      month: 0\n    };\n  } else {\n    let yearStart = startOfYear(subYears(new Date(), 1)),\n      yearEnd = endOfYear(yearStart),\n      monthStart = startOfMonth(subMonths(new Date(), 2)),\n      monthEnd = endOfMonth(monthStart);\n    eui = {\n      year: calcEUI(data, area, yearStart, yearEnd) || 0,\n      month: calcEUI(data, area, monthStart, monthEnd) || 0\n    };\n  }\n  return eui;\n};\n\nexport {\n  calcScale,\n  chooseIcon,\n  validEmail,\n  toURLQuery,\n  parseQueryParams,\n  conversionFactors,\n  units,\n  convert,\n  capFirst,\n  replaceAll,\n  stringifyID,\n  formatNumber,\n  formatFloat,\n  formatPercent,\n  calcProgress,\n  normalize,\n  normalizeBack,\n  euiTimeScaler,\n  calcCVRMSE,\n  calcNMBE,\n  boxPlot,\n  minTimeseries,\n  maxTimeseries,\n  reduceTimeseries,\n  filterTimeseries,\n  groupTimeseries,\n  groupTimeseriesDay,\n  aggregateTimeSeries,\n  totalTimeseries,\n  averageTimeseries,\n  makeDailyTimeseries,\n  findMissingDays,\n  calcEUI,\n  calcBuildingEUI,\n  calcIntensity,\n  EUIByType,\n  EUIByYear,\n  calcMeterTotal,\n  cleanTimeseriesInterpolate,\n  dataStatistics,\n  uncleanTimeseries,\n  interpolateTimeseries,\n  maxTimeseriesWithDate,\n  valuesTimeseries,\n  timeseriesToXY,\n  cleanTimeseries,\n  isTimeseriesUniform,\n  monthlyValueWithTrend,\n  getLastTimestamp,\n  getFirstTimestamp,\n  preAllocateTimeseriesMinutes,\n  TimeseriesArrayToObject,\n  TimeseriesObjectToArray\n};\n","import {\n    blueGrey,\n    indigo,\n    green,\n    deepOrange,\n    brown,\n    amber,\n    orange,\n    blue,\n    lightGreen\n} from \"@material-ui/core/colors\";\n\nconst Meters = {\n    eui: {\n        type: \"eui\",\n        name: \"EUI\",\n        icon: \"account_balance\",\n        color: blueGrey,\n        units: \"kBtu/ft²\",\n        intensityUnits: \"kBtu/ft²\",\n        largeUnits: \"kBtu/ft²\",\n        demandUnits: \"kBtu/ft²/hr\",\n        largeDemandUnits: \"kBtu/ft²/hr\"\n    },\n    energy: {\n        type: \"energy\",\n        name: \"Total Energy\",\n        icon: \"account_balance\",\n        color: blueGrey,\n        units: \"kBtu\",\n        intensityUnits: \"kBtu/ft²\",\n        largeUnits: \"MBtu\",\n        demandUnits: \"kBtu/hr\",\n        largeDemandUnits: \"MBtu/hr\"\n    },\n    electricity: {\n        type: \"electricity\",\n        name: \"Electricity\",\n        icon: \"power\",\n        color: green,\n        units: \"kWh\",\n        intensityUnits: \"kWh/ft²\",\n        largeUnits: \"MWh\",\n        demandUnits: \"kW\",\n        largeDemandUnits: \"MW\"\n    },\n    steam: {\n        type: \"steam\",\n        name: \"Steam\",\n        icon: \"whatshot\",\n        color: deepOrange,\n        units: \"lbs\",\n        intensityUnits: \"lbs/ft²\",\n        largeUnits: \"1,000 lbs\",\n        demandUnits: \"lbs/hr\",\n        largeDemandUnits: \"1,000 lbs/hr\"\n    },\n    ng: {\n        type: \"ng\",\n        name: \"Natural Gas\",\n        icon: \"grain\",\n        color: orange,\n        units: \"Therms\",\n        intensityUnits: \"Therms/ft²\",\n        largeUnits: \"1,000 Therms\",\n        demandUnits: \"Therms/hr\",\n        largeDemandUnits: \"1,000 Therms/hr\"\n    },\n    chw: {\n        type: \"chw\",\n        name: \"Chilled Water\",\n        icon: \"ac_unit\",\n        color: indigo,\n        units: \"TonHrs\",\n        intensityUnits: \"TonHrs/ft²\",\n        largeUnits: \"1,000 TonHrs\",\n        demandUnits: \"Tons\",\n        largeDemandUnits: \"1,000 Tons\"\n    },\n    hw: {\n        type: \"hw\",\n        name: \"Hot Water\",\n        icon: \"invert_colors\",\n        color: amber,\n        units: \"kBtu\",\n        intensityUnits: \"kBtu/ft²\",\n        largeUnits: \"Mbtu\",\n        demandUnits: \"KBtu/hr\",\n        largeDemandUnits: \"MBtu/hr\"\n    },\n    water: {\n        type: \"water\",\n        name: \"Water\",\n        icon: \"opacity\",\n        color: blue,\n        units: \"gals\",\n        intensityUnits: \"gals/ft²\",\n        largeUnits: \"1,000 gals\",\n        demandUnits: \"gals/hr\",\n        largeDemandUnits: \"1,000 gals/hr\"\n    },\n    cost: {\n        type: \"cost\",\n        name: \"Cost\",\n        icon: \"attach_money\",\n        color: lightGreen,\n        units: \"$\",\n        intensityUnits: \"$/ft²\",\n        largeUnits: \"$1,000\",\n        demandUnits: \"$/hr\",\n        largeDemandUnits: \"1,000 $/hr\"\n    },\n    emissions: {\n        type: \"emissions\",\n        name: \"CO2e Emissions\",\n        icon: \"cloud\",\n        color: brown,\n        units: \"lbs CO2e\",\n        intensityUnits: \"lbs CO2e/ft²\",\n        largeUnits: \"1,000 lbs CO2e\",\n        demandUnits: \"CO2e/hr\",\n        largeDemandUnits: \"1,000 CO2e/hr\"\n    }\n};\n\nconst meterOrder = [\n    \"eui\",\n    \"energy\",\n    \"emissions\",\n    \"cost\",\n    \"electricity\",\n    \"steam\",\n    \"ng\",\n    \"chw\",\n    \"hw\",\n    \"water\"\n];\nconst simpleMeter = m => ({\n    _id: m._id,\n    type: m.type,\n    isSubMeter: m.isSubMeter,\n    isVirtualMeter: m.isVirtualMeter,\n    name: m.name,\n    units: m.units\n});\nconst sortMeters = (a, b) =>\n    meterOrder.indexOf(a) < meterOrder.indexOf(b) ? -1 : 1;\nconst getAvailableMeters = (buildings = [], total, emissions, cost) => {\n    let meters = [\n        ...new Set(\n            buildings\n                .map(b => Object.keys((b.data || {}).actual || {}))\n                .reduce((a, b) => a.concat(b), [])\n        )\n    ].sort(sortMeters);\n    if (emissions) meters.unshift(\"emissions\");\n    if (cost) meters.unshift(\"cost\");\n    if (total) meters.unshift(\"energy\");\n    return meters;\n};\n\nexport { Meters, meterOrder, sortMeters, getAvailableMeters, simpleMeter };\n","import * as utilities from \"./utilities.js\";\nimport * as meters from \"./meters.js\";\n\nexport default Object.assign({}, utilities, meters);\n"],"names":["quantile","max","sum","interquartileRange","min","mean","modeSorted","medianSorted","medianAbsoluteDeviation","uniqueCountSorted","standardDeviation","variance","startOfDay","startOfMonth","startOfYear","parse","addMinutes","addHours","addDays","addMonths","addYears","getHours","getMinutes","setHours","setMinutes","setSeconds","format","endOfDay","differenceInYears","endOfYear","subMonths","getYear","subYears","endOfMonth","blueGrey","green","deepOrange","orange","indigo","amber","blue","lightGreen","brown"],"mappings":"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"}