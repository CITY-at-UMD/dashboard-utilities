{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const {\n\tblueGrey,\n\tindigo,\n\tgreen,\n\tdeepOrange,\n\tbrown,\n\tamber,\n\tgrey,\n\torange,\n\tblue,\n\tlightGreen\n} = require(\"@material-ui/core/colors\");\nconst {\n\tmean,\n\tinterquartileRange,\n\tquantile,\n\tmin,\n\tmax,\n\tsum,\n\tmedianAbsoluteDeviation,\n\tmodeSorted,\n\tmedianSorted,\n\tuniqueCountSorted,\n\tvariance,\n\tstandardDeviation\n} = require(\"simple-statistics\");\n\nconst {\n\tsubYears,\n\tgetYear,\n\tformat,\n\taddMinutes,\n\taddHours,\n\taddDays,\n\taddMonths,\n\taddYears,\n\tsubMonths,\n\tstartOfMonth,\n\tstartOfDay,\n\tstartOfYear,\n\tendOfYear,\n\tendOfMonth,\n\tendOfDay,\n\tdifferenceInYears,\n\tparse\n} = require(\"date-fns\");\nconst groupBy = require(\"lodash/groupBy\");\nconst merge = require(\"lodash/merge\");\n// Conversions\nconst conversionFactors = {\n\telectricity: {\n\t\tenergy: 3.4121416331, // kWh to kBtu\n\t\t// cost: 0.111, //$/kWh,\n\t\temissions: 0.53 //CO2e\n\t},\n\tsteam: {\n\t\tenergy: 1.19, // lbs to kBtu,\n\t\t// cost: 0.0255, //$/lbs,\n\t\temissions: 0.1397 //CO2e\n\t},\n\thw: {\n\t\tenergy: 1, // kBtu to kBtu,\n\t\t// cost: 0, //$/kBtu,\n\t\temissions: 0 //CO2e\n\t},\n\twater: {\n\t\tenergy: 0, // gals to kBtu,\n\t\t// cost: 0.019, //$/gal,\n\t\temissions: 0 //CO2e\n\t},\n\tchw: {\n\t\tenergy: 12, // TonHrs to kBtu,\n\t\t// cost: 0.186, //$/TonHr,\n\t\temissions: 0 //CO2e\n\t},\n\tng: {\n\t\tenergy: 99.9761, // therm to kBtu,\n\t\t// cost: 0, //$/kWh,\n\t\temissions: 11.7 //therm to lbs CO2e\n\t},\n\toil: {\n\t\tenergy: 165.726,\n\t\temissions: 22.4\n\t}\n};\nconst convert = (\n\tvalue,\n\tmeterType,\n\tto,\n\tconversionFactors = conversionFactors\n) => {\n\treturn value * conversionFactors[meterType][to];\n};\n// Buildings and Meters\nconst units = {\n\telectricity: [\"kWh\", \"MWh\", \"MJ\", \"kW\"],\n\tsteam: [\"lbs\", \"kBtu\", \"btu\"],\n\tchw: [\"ton-hr\", \"kBtu\", \"btu\"],\n\tng: [\"therm\", \"ccf\", \"mcf\", \"kBtu\"],\n\toil: [\"gals\", \"barallel\", \"kBtu\", \"btu\"],\n\twater: [\"gals\"]\n};\n\n// Formatting\nconst capFirst = (string = \"\") =>\n\tstring.replace(\n\t\t/\\w\\S*/g,\n\t\ttxt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n\t);\nconst replaceAll = (string = \"\", search, replacement) =>\n\tstring.replace(new RegExp(search, \"g\"), replacement);\nconst stringifyID = id =>\n\tid < 10 ? `00${id}` : id < 100 ? `0${id}` : String(id);\nconst formatNumber = number =>\n\tisNaN(number) ? \"0\" : parseInt(Math.round(number), 10).toLocaleString();\nconst formatFloat = number =>\n\tisNaN(number) ? \"0\" : parseFloat(number).toLocaleString();\nconst formatPercent = number =>\n\tisNaN(number) ? \"0\" : formatNumber(number * 100);\nconst toURLQuery = obj =>\n\t\"?\".concat(\n\t\tObject.keys(obj)\n\t\t\t.map(k => [k, obj[k]].join(\"=\"))\n\t\t\t.join(\"&\")\n\t);\nconst parseQueryParams = query =>\n\tnew Map(\n\t\tquery\n\t\t\t.replace(\"?\", \"\")\n\t\t\t.split(\"&\")\n\t\t\t.map(s => s.split(\"=\"))\n\t);\n//Map\nconst calcScale = (values, units = \"\") => {\n\tvalues = values.filter(v => v > 0);\n\tif (values.length < 1) return { low: 1, high: 2, max: 3, units };\n\treturn {\n\t\tlow: parseInt(quantile(values, 0.5), 10),\n\t\thigh: parseInt(quantile(values, 0.75), 10),\n\t\tmax: parseInt(max(values), 10),\n\t\tunits\n\t};\n};\nconst chooseIcon = (basename, { low, high }, value) => {\n\tlet icon = `${basename}-err`;\n\tif (!value || !low || !high) return icon;\n\tif (value <= low) {\n\t\ticon = `${basename}-low`;\n\t} else if (value <= high) {\n\t\ticon = `${basename}-med`;\n\t} else {\n\t\ticon = `${basename}-high`;\n\t}\n\treturn icon;\n};\n//Charting Functions\nconst timeseriesLabels = t => {\n\tif (getMonth(t) === 0) {\n\t\treturn format(t, \"MMM YYYY\");\n\t}\n\treturn getMonth(t) % 2 === 0 ? format(t, \"MMMM\") : \"\";\n};\nconst timeseriesToXY = (data, scale = 1) =>\n\tdata.map(v => ({\n\t\tx: new Date(v[0]),\n\t\ty: v[1] / scale\n\t}));\n// General Functions & Adjustments\nconst calcProgress = (value, baseline) => (value - baseline) / baseline;\nconst normalize = (x, min, max) => (x - min) / (max - min);\nconst normalizeBack = (x, min, max) => x * (max - min) + min;\nconst euiTimeScaler = (startDate, endDate) => {\n\tif (isNaN(startDate)) {\n\t\tstartDate = new Date(startDate).valueOf();\n\t}\n\tif (isNaN(endDate)) {\n\t\tendDate = new Date(endDate).valueOf();\n\t}\n\tlet msyear = 31557600000; // 365.25 days\n\treturn msyear / (endDate - startDate);\n};\nconst validEmail = string => {\n\tlet nr = new RegExp(\n\t\t// eslint-disable-next-line\n\t\t/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n\t);\n\treturn Boolean(string.match(nr));\n};\n// Statistics\nconst calcCVRMSE = (actual, simulated) => {\n\tvar diffArray = [],\n\t\tactualValues = [];\n\tfor (var i in actual) {\n\t\tdiffArray.push(Math.pow(actual[i] - simulated[i], 2));\n\t\tactualValues.push(actual[i]);\n\t}\n\tvar n = diffArray.length,\n\t\tp = 1.0;\n\tvar ybar = sum(actualValues) / actualValues.length;\n\tvar cvrmse = Math.sqrt(sum(diffArray) / (n - p)) / ybar;\n\treturn cvrmse * 100;\n};\nconst calcNMBE = (actual, simulated) => {\n\tvar diffArray = [],\n\t\tactualValues = [];\n\tfor (var i in actual) {\n\t\tdiffArray.push(actual[i] - simulated[i]);\n\t\tactualValues.push(actual[i]);\n\t}\n\tvar n = diffArray.length,\n\t\tp = 1.0;\n\tvar ybar = sum(actualValues) / actualValues.length;\n\tvar nmbe = sum(diffArray) / ((n - p) * ybar);\n\treturn nmbe * 100;\n};\nconst dataStatistics = (values, filterZero = false) => {\n\tif (filterZero) {\n\t\tvalues = values.filter(v => v > 0);\n\t}\n\tif (values.length < 2) {\n\t\t// throw new Error('Not Enough Values')\n\t\treturn {};\n\t}\n\tvalues = values.sort();\n\tlet iq = interquartileRange(values),\n\t\tq1 = quantile(values, 0.25),\n\t\tq3 = quantile(values, 0.75),\n\t\tlowerInnerFence = q1 - 1.5 * iq,\n\t\tlowerOuterFence = q3 - 3 * iq,\n\t\tupperInnerFence = q1 + 1.5 * iq,\n\t\tupperOuterFence = q3 + 3 * iq;\n\treturn {\n\t\tiq,\n\t\tq1,\n\t\tq3,\n\t\tlowerInnerFence,\n\t\tlowerOuterFence,\n\t\tupperInnerFence,\n\t\tupperOuterFence,\n\t\tmin: min(values),\n\t\tmax: max(values),\n\t\tmean: mean(values),\n\t\tmode: modeSorted(values),\n\t\tmedian: medianSorted(values),\n\t\tmedianAbsoluteDeviation: medianAbsoluteDeviation(values),\n\t\tuniqueCountSorted: uniqueCountSorted(values),\n\t\tstandardDeviation: standardDeviation(values),\n\t\tvariance: variance(values)\n\t};\n};\nconst boxPlot = (values, filterZero = false) => {\n\tif (filterZero) {\n\t\tvalues = values.filter(v => v > 0);\n\t}\n\tif (values.length < 2) {\n\t\tthrow new Error(\"not enough values\");\n\t}\n\tlet q1 = quantile(values, 0.25),\n\t\tq3 = quantile(values, 0.75),\n\t\tminVal = min(values),\n\t\tmaxVal = max(values);\n\treturn {\n\t\tq1,\n\t\tq3,\n\t\tmin: minVal,\n\t\tmax: maxVal\n\t};\n};\n\n// Dates\nconst intervalStart = (date, interval) => {\n\t//Supported Intervals: day, month, year\n\tlet t;\n\tswitch (interval) {\n\t\tcase \"day\":\n\t\t\tt = startOfDay(date);\n\t\t\tbreak;\n\t\tcase \"month\":\n\t\t\tt = startOfMonth(date);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tt = startOfYear(date);\n\t}\n\treturn t.valueOf();\n};\nconst dateRange = (startDate, endDate, interval, step = 1) => {\n\t// Supported Inervals: minutes,hour,day, month, year\n\tstartDate = parse(startDate);\n\tendDate = parse(endDate);\n\tlet range = [startDate];\n\tif (startDate >= endDate) return [];\n\twhile (range[range.length - 1].valueOf() < endDate.valueOf()) {\n\t\tlet d;\n\t\tswitch (interval) {\n\t\t\tcase \"minute\":\n\t\t\t\td = addMinutes(range[range.length - 1], step);\n\t\t\t\tbreak;\n\t\t\tcase \"hour\":\n\t\t\t\td = addHours(range[range.length - 1], step);\n\t\t\t\tbreak;\n\t\t\tcase \"day\":\n\t\t\t\td = addDays(range[range.length - 1], step);\n\t\t\t\tbreak;\n\t\t\tcase \"month\":\n\t\t\t\td = addMonths(range[range.length - 1], step);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\td = addYears(range[range.length - 1], step);\n\t\t}\n\t\trange.push(d);\n\t}\n\treturn range;\n};\n\nconst toObject = (a, b) => Object.assign(a, { [b[0]]: b[1] });\n// Timeseries [[dateTime, value, origionalValue], ...]\n// Stats\nconst minTimeseries = ts => min(ts.map(v => v[1]));\nconst maxTimeseries = ts => max(ts.map(v => v[1]));\nconst maxTimeseriesWithDate = ts => ts.sort((a, b) => b[1] - a[1])[0];\nconst cardinalityTimeseries = ts => new Set(ts.map(v => v[1])).size;\nconst getFirstTimestamp = ts => new Date(min(ts.map(v => v[0])));\nconst getLastTimestamp = ts => new Date(max(ts.map(v => v[0])));\n\n// Formatting\nconst timeseriesToObject = ts =>\n\tts\n\t\t.filter(t => t[1] !== NaN || t[1] !== null)\n\t\t.reduce((a, b) => Object.assign(a, { [b[0]]: b[1] }), {});\nconst objToTimeseries = ts =>\n\tObject.entries(ts)\n\t\t.map(([d, v]) => [new Date(d), v])\n\t\t.sort((a, b) => a[0] - b[0]);\n\n// Merging\nconst mergeTimeseries = ({ raw = [], clean = [], forecast = [] }) => {\n\tlet data = objToTimeseries(\n\t\tmerge(\n\t\t\ttimeseriesToObject(forecast),\n\t\t\ttimeseriesToObject(raw),\n\t\t\ttimeseriesToObject(clean)\n\t\t)\n\t);\n\treturn data;\n};\nconst mergeOrderedTimeseries = (...arrayOfTimeseries) => {\n\tlet data = arrayOfTimeseries.map(a =>\n\t\ttimeseriesToObject(a.map(v => [new Date(v[0]), v[1]]))\n\t);\n\tlet merged = Object.assign(...data.reverse());\n\t// console.log(merged);\n\tlet ts = objToTimeseries(merged);\n\treturn ts;\n};\n// Reduce\nconst reduceTimeseries = (...arrays) => {\n\tlet data = arrays.map(a =>\n\t\ta.map(([date, value]) => [new Date(date).valueOf(), value])\n\t);\n\tlet ts = [\n\t\t...data.map(a => new Map(a)).reduce((a, b) => {\n\t\t\tfor (var date of b.keys()) {\n\t\t\t\ta.has(date)\n\t\t\t\t\t? a.set(date, b.get(date) + a.get(date))\n\t\t\t\t\t: a.set(date, b.get(date));\n\t\t\t}\n\t\t\treturn a;\n\t\t}, new Map())\n\t]\n\t\t.sort((a, b) => a[0] - b[0])\n\t\t.map(([date, value]) => [new Date(date), value]);\n\treturn ts;\n};\n// Cleaning\nconst cleanTimeseries = (data, replacement, min, max) => {\n\tdata = data.map(\n\t\tv => (v[1] > max || v[1] < min ? [v[0], replacement, v[1]] : v)\n\t);\n\treturn data;\n};\nconst uncleanTimeseries = data => data.map(r => (r[2] ? [r[0], r[2]] : r));\nconst interpolateTimeseries = (array, index) => {\n\tlet prevIndex = index - 1 < 0 ? 0 : index - 1;\n\tlet prev = array\n\t\t.slice(0, prevIndex)\n\t\t.filter(v => v[1])\n\t\t.reverse()[0];\n\tlet next = array.slice(index + 1).filter(v => v[1])[0];\n\treturn ((prev ? prev[1] : 0) + (next ? next[1] : 0)) / 2;\n};\nconst cleanTimeseriesInterpolate = (data, min, max) => {\n\tdata = data\n\t\t.map(v => (isNaN(v[1]) ? [v[0], 0, v[1]] : v))\n\t\t.map(v => (v[1] < min ? [v[0], null, v[1]] : v)) //min\n\t\t.map(v => (v[1] > max ? [v[0], null, v[1]] : v)) //max\n\t\t.map((v, i, array) => {\n\t\t\tif (!v[1]) {\n\t\t\t\tlet avg = interpolateTimeseries(array, i);\n\t\t\t\treturn [v[0], avg, v[2]];\n\t\t\t} else {\n\t\t\t\treturn v;\n\t\t\t}\n\t\t}); //interpolate\n\treturn data;\n};\n// Filtering\nconst filterTimeseries = (data, startDate, endDate) => {\n\tstartDate = new Date(startDate);\n\tendDate = new Date(endDate);\n\treturn data\n\t\t.map(([date, value]) => [new Date(date), value])\n\t\t.filter(t => t[0] >= startDate && t[0] <= endDate);\n};\n// Mapping and Sorting\nconst valuesTimeseries = data => data.map(v => v[1]);\nconst sortTimeseries = ts => ts.sort((a, b) => a[0] - b[0]);\nconst sortTS = (a, b) => {\n\treturn a[0] - b[0];\n};\n// Grouping\nconst groupTimeseriesDay = ts =>\n\tObject.entries(groupBy(ts, v => startOfDay(v[0]))).map(\n\t\t([day, timeseries]) => [new Date(day), timeseries]\n\t);\nconst groupTimeseries = (data, interval) => {\n\t//Supported Intervals: day, month, year\n\tlet group = data.map(v => [parse(v[0]).valueOf(), v[1]]).reduce((a, b) => {\n\t\tlet t = intervalStart(b[0], interval);\n\t\tif (a.has(t)) {\n\t\t\ta.set(t, [...a.get(t), b]);\n\t\t} else {\n\t\t\ta.set(t, [b]);\n\t\t}\n\t\treturn a;\n\t}, new Map());\n\treturn [...group];\n};\n// Aggregation\nconst aggregateTimeSeries = (data, interval) => {\n\t//Supported Intervals: day, month, year\n\tlet red = data.map(v => [parse(v[0]), v[1]]).reduce((a, b) => {\n\t\tlet ts = intervalStart(b[0], interval);\n\t\tif (!a.has(ts)) {\n\t\t\ta.set(ts, b[1]);\n\t\t} else {\n\t\t\ta.set(ts, a.get(ts) + b[1]);\n\t\t}\n\t\treturn a;\n\t}, new Map());\n\tdata = [...red].map(v => [new Date(v[0]), v[1]]);\n\treturn data;\n};\nconst totalTimeseries = data => data.map(a => a[1]).reduce((a, b) => a + b, 0);\nconst averageTimeseries = data => mean(data.map(v => v[1]));\nconst monthlyValueWithTrend = (data, units, month, baseline) => {\n\tlet dm = new Map(data);\n\tif (!dm.has(month.valueOf())) {\n\t\treturn { value: 0, trend: { value: null, text: \"\" } };\n\t}\n\tlet value = dm.get(month.valueOf()),\n\t\tbaselineValue = dm.get(baseline.valueOf()) || 0;\n\treturn {\n\t\tvalue,\n\t\tunits,\n\t\ttrend: {\n\t\t\tvalue: calcProgress(value, baselineValue) * 100,\n\t\t\ttext: `${format(baseline, \"MMM YYYY\")}`\n\t\t}\n\t};\n};\n// ETC\nconst isTimeseriesUniform = data => cardinalityTimeseries(data) < 3;\nconst makeDailyTimeseries = (date, value, interval, step) => {\n\tlet range = dateRange(date, endOfDay(date), interval);\n\tlet data = range.map((d, i, arr) => [d.valueOf(), value / arr.length]);\n\treturn data;\n};\nconst findMissingDays = (data, { startDate, endDate } = {}) => {\n\t// Sort Data\n\tdata = data.sort((a, b) => a[0] - b[0]);\n\t// Set Default Start Dates\n\tif (!startDate) {\n\t\tstartDate = data[0][0];\n\t}\n\tif (!endDate) {\n\t\tendDate = data[data.length - 1][0];\n\t}\n\tlet range = dateRange(startDate, endDate, \"day\");\n\tlet fullTs = new Set(range.map(d => d.valueOf()));\n\tlet dataDates = new Set(data.map(d => d[0]));\n\tlet missing = new Set([...fullTs].filter(d => !dataDates.has(d)));\n\treturn [...missing];\n};\n\nconst calcTotals = (\n\tdata,\n\ttotalType,\n\t{ typeLimit = [], conversionFactors = conversionFactors } = {}\n) => {\n\tlet total = Object.keys(data)\n\t\t.filter(k => typeLimit.indexOf(k) === -1)\n\t\t.filter(k => conversionFactors.hasOwnProperty(k) && data[k].length > 0)\n\t\t.map(k => {\n\t\t\treturn data[k].map(v => [\n\t\t\t\tv[0],\n\t\t\t\tconvert(v[1], k, totalType, conversionFactors)\n\t\t\t]);\n\t\t})\n\t\t.reduce((a, b) => reduceTimeseries(a, b), []);\n\treturn total;\n};\nconst calcDataIntensity = (\n\tdata = [],\n\tarea = 0,\n\tstartDate,\n\tendDate,\n\t{\n\t\ttypeLimit = [],\n\t\tconversionFactors = conversionFactors,\n\t\tconvert = false\n\t} = {}\n) => {\n\tdata = sortTimeseries(data);\n\tlet total = totalTimeseries(data);\n\tif (!startDate || !endDate) {\n\t\tstartDate = data[0][0];\n\t\tendDate = data[data.length - 1][0];\n\t}\n\tif (startDate && endDate) {\n\t\ttotal = totalTimeseries(filterTimeseries(data, startDate, endDate));\n\t}\n\treturn (total / area) * euiTimeScaler(startDate, endDate);\n};\n// Energy\nconst calcMeterTotal = (\n\tdata,\n\ttype,\n\tstartDate,\n\tendDate,\n\tlimit = [],\n\tconversionFactors = conversionFactors\n) => {\n\tlet total = Object.keys(data)\n\t\t.filter(k => limit.indexOf(k) === -1)\n\t\t.filter(k => conversionFactors.hasOwnProperty(k) && data[k].length > 0)\n\t\t.map((k, i) =>\n\t\t\tfilterTimeseries(data[k], startDate, endDate).map(v => [\n\t\t\t\tv[0],\n\t\t\t\tconvert(v[1], k, type)\n\t\t\t])\n\t\t)\n\t\t.reduce((a, b) => reduceTimeseries(a, b), []);\n\treturn total;\n};\nconst calcEUI = (data, area, startDate, endDate, limit = []) => {\n\tlet totalEnergy = totalTimeseries(\n\t\tcalcMeterTotal(data, \"energy\", startDate, endDate, limit)\n\t);\n\treturn (totalEnergy / area) * euiTimeScaler(startDate, endDate);\n};\nconst calcIntensity = (\n\tdata,\n\ttype,\n\tarea,\n\tstartDate,\n\tendDate,\n\tlimit = [],\n\tbtu = false\n) => {\n\tif ([\"energy\", \"emissions\", \"cost\"].indexOf(type) !== -1) {\n\t\tlet totalEnergy = totalTimeseries(\n\t\t\tcalcMeterTotal(data, type, startDate, endDate, limit)\n\t\t);\n\t\treturn (totalEnergy / area) * euiTimeScaler(startDate, endDate);\n\t} else {\n\t\tif (!data.hasOwnProperty(type)) return 0;\n\t\tlet total = totalTimeseries(\n\t\t\tfilterTimeseries(data[type], startDate, endDate)\n\t\t);\n\t\tlet value = (total / area) * euiTimeScaler(startDate, endDate);\n\t\treturn btu ? convert(value, type, \"energy\") : value;\n\t}\n};\n\nconst EUIByType = (\n\tdata,\n\tarea,\n\tstartDate,\n\tendDate,\n\tlimit = [],\n\tconversionFactors = conversionFactors\n) => {\n\tlet years = new Array(differenceInYears(endDate, startDate) + 1)\n\t\t.fill(0)\n\t\t.map((v, i) => {\n\t\t\tlet y = new Date(startDate.getFullYear() + i, 0);\n\t\t\treturn [y, startOfMonth(endOfYear(y))];\n\t\t});\n\tlet byType = Object.keys(data)\n\t\t.filter(\n\t\t\tk =>\n\t\t\t\tconversionFactors.hasOwnProperty(k) &&\n\t\t\t\tconversionFactors[k].energy > 0 &&\n\t\t\t\tlimit.indexOf(k) === -1\n\t\t)\n\t\t.map((k, i) =>\n\t\t\tyears.map(year => {\n\t\t\t\tlet sd = year[0].valueOf();\n\t\t\t\tlet ed = year[1].valueOf();\n\t\t\t\tif (ed > endDate.valueOf()) {\n\t\t\t\t\ted = endDate.valueOf();\n\t\t\t\t\tsd = startOfMonth(subMonths(ed, 11)).valueOf();\n\t\t\t\t}\n\t\t\t\tlet timeScaler = euiTimeScaler(sd, ed);\n\t\t\t\tlet value = convert(\n\t\t\t\t\t(totalTimeseries(filterTimeseries(data[k], sd, ed)) *\n\t\t\t\t\t\ttimeScaler) /\n\t\t\t\t\t\tarea,\n\t\t\t\t\tk,\n\t\t\t\t\t\"energy\"\n\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\ttype: k,\n\t\t\t\t\tyear: new Date(getYear(ed), 0).valueOf(),\n\t\t\t\t\tvalue\n\t\t\t\t};\n\t\t\t})\n\t\t);\n\treturn byType;\n};\nconst EUIByYear = (\n\tdata,\n\tarea,\n\tstartDate,\n\tendDate,\n\tlimit = [],\n\tbaselineYear,\n\tconversionFactors = conversionFactors\n) => {\n\tlet years = new Array(differenceInYears(endDate, startDate) + 1)\n\t\t.fill(0)\n\t\t.map((v, i) => {\n\t\t\tlet y = new Date(startDate.getFullYear() + i, 0);\n\t\t\treturn [y, startOfMonth(endOfYear(y))];\n\t\t});\n\tlet types = Object.keys(data).filter(\n\t\tk =>\n\t\t\tconversionFactors.hasOwnProperty(k) &&\n\t\t\tconversionFactors[k].energy > 0 &&\n\t\t\tlimit.indexOf(k) === -1\n\t);\n\tlet baseline = new Map(\n\t\ttypes.map(t => [\n\t\t\tt,\n\t\t\tcalcIntensity(\n\t\t\t\tdata,\n\t\t\t\tt,\n\t\t\t\tarea,\n\t\t\t\tbaselineYear.valueOf(),\n\t\t\t\tstartOfMonth(endOfYear(baselineYear)).valueOf(),\n\t\t\t\tlimit,\n\t\t\t\ttrue\n\t\t\t)\n\t\t])\n\t);\n\tyears = years.map(([start, end]) => [\n\t\tstart.valueOf(),\n\t\ttypes.map(t => {\n\t\t\tlet value = calcIntensity(\n\t\t\t\tdata,\n\t\t\t\tt,\n\t\t\t\tarea,\n\t\t\t\tstart.valueOf(),\n\t\t\t\tend.valueOf(),\n\t\t\t\tlimit,\n\t\t\t\ttrue\n\t\t\t);\n\t\t\treturn {\n\t\t\t\ttype: t,\n\t\t\t\tprogress: calcProgress(value, baseline.get(t)),\n\t\t\t\tvalue\n\t\t\t};\n\t\t})\n\t]);\n\treturn years;\n};\nconst calcBuildingEUI = (data, area) => {\n\tlet eui;\n\tif (!data || !area) {\n\t\teui = {\n\t\t\tyear: 0,\n\t\t\tmonth: 0\n\t\t};\n\t} else {\n\t\tlet yearStart = startOfYear(subYears(new Date(), 1)),\n\t\t\tyearEnd = endOfYear(yearStart),\n\t\t\tmonthStart = startOfMonth(subMonths(new Date(), 2)),\n\t\t\tmonthEnd = endOfMonth(monthStart);\n\t\teui = {\n\t\t\tyear: calcEUI(data, area, yearStart, yearEnd) || 0,\n\t\t\tmonth: calcEUI(data, area, monthStart, monthEnd) || 0\n\t\t};\n\t}\n\treturn eui;\n};\nconst Meters = {\n\teui: {\n\t\ttype: \"eui\",\n\t\tname: \"EUI\",\n\t\ticon: \"account_balance\",\n\t\tcolor: blueGrey,\n\t\tunits: \"kBtu/ft²\",\n\t\tintensityUnits: \"kBtu/ft²\",\n\t\tlargeUnits: \"kBtu/ft²\",\n\t\tkUnits: \"MBtu/ft²\",\n\t\tdemandUnits: \"kBtu/ft²/hr\",\n\t\tlargeDemandUnits: \"kBtu/ft²/hr\"\n\t},\n\tenergy: {\n\t\ttype: \"energy\",\n\t\tname: \"Total Energy\",\n\t\ticon: \"account_balance\",\n\t\tcolor: blueGrey,\n\t\tunits: \"kBtu\",\n\t\tintensityUnits: \"kBtu/ft²\",\n\t\tlargeUnits: \"MBtu\",\n\t\tkUnits: \"MBtu\",\n\t\tdemandUnits: \"kBtu/hr\",\n\t\tlargeDemandUnits: \"MBtu/hr\"\n\t},\n\telectricity: {\n\t\ttype: \"electricity\",\n\t\tname: \"Electricity\",\n\t\ticon: \"power\",\n\t\tcolor: green,\n\t\tunits: \"kWh\",\n\t\tintensityUnits: \"kWh/ft²\",\n\t\tlargeUnits: \"MWh\",\n\t\tkUnits: \"MWh\",\n\t\tdemandUnits: \"kW\",\n\t\tlargeDemandUnits: \"MW\"\n\t},\n\tsteam: {\n\t\ttype: \"steam\",\n\t\tname: \"Steam\",\n\t\ticon: \"whatshot\",\n\t\tcolor: deepOrange,\n\t\tunits: \"lbs\",\n\t\tintensityUnits: \"lbs/ft²\",\n\t\tlargeUnits: \"1,000 lbs\",\n\t\tkUnits: \"klbs\",\n\t\tdemandUnits: \"lbs/hr\",\n\t\tlargeDemandUnits: \"1,000 lbs/hr\"\n\t},\n\tng: {\n\t\ttype: \"ng\",\n\t\tname: \"Natural Gas\",\n\t\ticon: \"grain\",\n\t\tcolor: orange,\n\t\tunits: \"Therms\",\n\t\tintensityUnits: \"Therms/ft²\",\n\t\tlargeUnits: \"1,000 Therms\",\n\t\tkUnits: \"kTherms\",\n\t\tdemandUnits: \"Therms/hr\",\n\t\tlargeDemandUnits: \"1,000 Therms/hr\"\n\t},\n\tchw: {\n\t\ttype: \"chw\",\n\t\tname: \"Chilled Water\",\n\t\ticon: \"ac_unit\",\n\t\tcolor: indigo,\n\t\tunits: \"TonHrs\",\n\t\tintensityUnits: \"TonHrs/ft²\",\n\t\tlargeUnits: \"1,000 TonHrs\",\n\t\tkUnits: \"kTonHrs\",\n\t\tdemandUnits: \"Tons\",\n\t\tlargeDemandUnits: \"1,000 Tons\"\n\t},\n\thw: {\n\t\ttype: \"hw\",\n\t\tname: \"Hot Water\",\n\t\ticon: \"invert_colors\",\n\t\tcolor: amber,\n\t\tunits: \"kBtu\",\n\t\tintensityUnits: \"kBtu/ft²\",\n\t\tlargeUnits: \"Mbtu\",\n\t\tkUnits: \"Mbtu\",\n\t\tdemandUnits: \"KBtu/hr\",\n\t\tlargeDemandUnits: \"MBtu/hr\"\n\t},\n\twater: {\n\t\ttype: \"water\",\n\t\tname: \"Water\",\n\t\ticon: \"opacity\",\n\t\tcolor: blue,\n\t\tunits: \"gals\",\n\t\tintensityUnits: \"gals/ft²\",\n\t\tlargeUnits: \"1,000 gals\",\n\t\tkUnits: \"kgals\",\n\t\tdemandUnits: \"gals/hr\",\n\t\tlargeDemandUnits: \"1,000 gals/hr\"\n\t},\n\toil: {\n\t\ttype: \"oil\",\n\t\tname: \"Fuel Oil\",\n\t\ticon: \"local_gas_station\",\n\t\tcolor: grey,\n\t\tunits: \"gals\",\n\t\tintensityUnits: \"gals/ft²\",\n\t\tlargeUnits: \"1,000 gals\",\n\t\tkUnits: \"kgals\",\n\t\tdemandUnits: \"gals/hr\",\n\t\tlargeDemandUnits: \"1,000 gals/hr\"\n\t},\n\tcost: {\n\t\ttype: \"cost\",\n\t\tname: \"Cost\",\n\t\ticon: \"attach_money\",\n\t\tcolor: lightGreen,\n\t\tunits: \"$\",\n\t\tintensityUnits: \"$/ft²\",\n\t\tlargeUnits: \"$1,000\",\n\t\tkUnits: \"thousands\",\n\t\tdemandUnits: \"$/hr\",\n\t\tlargeDemandUnits: \"1,000 $/hr\"\n\t},\n\temissions: {\n\t\ttype: \"emissions\",\n\t\tname: \"CO2e Emissions\",\n\t\ticon: \"cloud\",\n\t\tcolor: brown,\n\t\tunits: \"lbs CO2e\",\n\t\tintensityUnits: \"lbs CO2e/ft²\",\n\t\tlargeUnits: \"1,000 lbs CO2e\",\n\t\tkUnits: \"klbs CO2e\",\n\t\tdemandUnits: \"CO2e/hr\",\n\t\tlargeDemandUnits: \"1,000 CO2e/hr\"\n\t}\n};\n\nconst meterOrder = [\n\t\"eui\",\n\t\"energy\",\n\t\"emissions\",\n\t\"cost\",\n\t\"electricity\",\n\t\"steam\",\n\t\"ng\",\n\t\"chw\",\n\t\"hw\",\n\t\"oil\",\n\t\"water\"\n];\nconst simpleMeter = m => ({\n\t_id: m._id,\n\ttype: m.type,\n\tisSubMeter: m.isSubMeter,\n\tisVirtualMeter: m.isVirtualMeter,\n\tname: m.name,\n\tunits: m.units\n});\nconst sortMeters = (a, b) =>\n\tmeterOrder.indexOf(a) < meterOrder.indexOf(b) ? -1 : 1;\n\nconst getAvailableMeters = (buildings = [], total, emissions, cost) => {\n\tlet meters = [\n\t\t...new Set(\n\t\t\tbuildings\n\t\t\t\t.map(b => Object.keys((b.data || {}).actual || {}))\n\t\t\t\t.reduce((a, b) => a.concat(b), [])\n\t\t)\n\t].sort(sortMeters);\n\tif (emissions) meters.unshift(\"emissions\");\n\tif (cost) meters.unshift(\"cost\");\n\tif (total) meters.unshift(\"energy\");\n\treturn meters;\n};\n\nmodule.exports = {\n\tMeters,\n\tmeterOrder,\n\tsortMeters,\n\tgetAvailableMeters,\n\tsimpleMeter,\n\tcalcScale,\n\tchooseIcon,\n\tvalidEmail,\n\ttoURLQuery,\n\tparseQueryParams,\n\tconversionFactors,\n\tunits,\n\tconvert,\n\tcapFirst,\n\treplaceAll,\n\tstringifyID,\n\tformatNumber,\n\tformatFloat,\n\tformatPercent,\n\tcalcProgress,\n\tnormalize,\n\tnormalizeBack,\n\teuiTimeScaler,\n\tcalcCVRMSE,\n\tcalcNMBE,\n\tboxPlot,\n\tminTimeseries,\n\tmaxTimeseries,\n\treduceTimeseries,\n\tfilterTimeseries,\n\tgroupTimeseries,\n\tgroupTimeseriesDay,\n\taggregateTimeSeries,\n\ttotalTimeseries,\n\taverageTimeseries,\n\tmakeDailyTimeseries,\n\tfindMissingDays,\n\tcalcEUI,\n\tcalcBuildingEUI,\n\tcalcIntensity,\n\tEUIByType,\n\tEUIByYear,\n\tcalcMeterTotal,\n\tcleanTimeseriesInterpolate,\n\tdataStatistics,\n\tuncleanTimeseries,\n\tinterpolateTimeseries,\n\tmaxTimeseriesWithDate,\n\tvaluesTimeseries,\n\ttimeseriesToXY,\n\tcleanTimeseries,\n\tisTimeseriesUniform,\n\tmonthlyValueWithTrend,\n\tgetLastTimestamp,\n\tgetFirstTimestamp,\n\ttimeseriesToObject,\n\tobjToTimeseries,\n\tmergeTimeseries,\n\tmergeOrderedTimeseries,\n\tsortTimeseries,\n\tcalcTotals,\n\tcalcDataIntensity,\n\ttoObject,\n\ttimeseriesLabels,\n\tsortTS\n};\n"],"names":["require","blueGrey","indigo","green","deepOrange","brown","amber","grey","orange","blue","lightGreen","mean","interquartileRange","quantile","min","max","sum","medianAbsoluteDeviation","modeSorted","medianSorted","uniqueCountSorted","variance","standardDeviation","subYears","getYear","format","addMinutes","addHours","addDays","addMonths","addYears","subMonths","startOfMonth","startOfDay","startOfYear","endOfYear","endOfMonth","endOfDay","differenceInYears","parse","groupBy","merge","convert","value","meterType","to","conversionFactors","formatNumber","number","isNaN","parseInt","Math","round","toLocaleString","calcProgress","baseline","euiTimeScaler","startDate","endDate","Date","valueOf","intervalStart","date","interval","t","dateRange","step","range","length","d","push","timeseriesToObject","ts","filter","NaN","reduce","a","b","Object","assign","objToTimeseries","entries","map","v","sort","reduceTimeseries","arrays","data","Map","keys","has","set","get","interpolateTimeseries","array","index","prev","slice","reverse","next","filterTimeseries","sortTimeseries","totalTimeseries","calcMeterTotal","type","limit","k","indexOf","hasOwnProperty","i","calcEUI","area","calcIntensity","btu","meterOrder","sortMeters","module","exports","Meters","eui","name","icon","color","units","intensityUnits","largeUnits","kUnits","demandUnits","largeDemandUnits","energy","electricity","steam","ng","chw","hw","water","oil","cost","emissions","getAvailableMeters","buildings","total","meters","Set","actual","concat","unshift","simpleMeter","m","_id","isSubMeter","isVirtualMeter","calcScale","values","low","high","chooseIcon","basename","validEmail","string","nr","RegExp","Boolean","match","toURLQuery","obj","join","parseQueryParams","query","replace","split","s","capFirst","txt","charAt","toUpperCase","substr","toLowerCase","replaceAll","search","replacement","stringifyID","id","String","formatFloat","parseFloat","formatPercent","normalize","x","normalizeBack","calcCVRMSE","simulated","diffArray","actualValues","pow","n","ybar","sqrt","calcNMBE","boxPlot","filterZero","Error","q1","q3","minTimeseries","maxTimeseries","groupTimeseries","group","groupTimeseriesDay","timeseries","aggregateTimeSeries","red","averageTimeseries","makeDailyTimeseries","arr","findMissingDays","fullTs","dataDates","missing","calcBuildingEUI","yearStart","yearEnd","monthStart","monthEnd","year","month","EUIByType","years","Array","fill","y","getFullYear","sd","ed","timeScaler","EUIByYear","baselineYear","types","start","end","progress","cleanTimeseriesInterpolate","avg","dataStatistics","iq","lowerInnerFence","lowerOuterFence","upperInnerFence","upperOuterFence","mode","median","uncleanTimeseries","r","maxTimeseriesWithDate","valuesTimeseries","timeseriesToXY","scale","cleanTimeseries","isTimeseriesUniform","size","monthlyValueWithTrend","dm","trend","text","baselineValue","getLastTimestamp","getFirstTimestamp","mergeTimeseries","raw","clean","forecast","mergeOrderedTimeseries","arrayOfTimeseries","merged","calcTotals","totalType","typeLimit","calcDataIntensity","toObject","timeseriesLabels","getMonth","sortTS"],"mappings":"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"}