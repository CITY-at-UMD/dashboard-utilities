{"version":3,"sources":["../src/meters.js"],"names":["Meters","eui","type","name","icon","color","blueGrey","units","intensityUnits","largeUnits","demandUnits","largeDemandUnits","energy","electricity","green","steam","deepOrange","ng","orange","chw","indigo","hw","amber","water","blue","cost","lightGreen","emissions","brown","meterOrder","simpleMeter","_id","m","isSubMeter","isVirtualMeter","sortMeters","a","b","indexOf","getAvailableMeters","buildings","total","meters","Set","map","Object","keys","data","actual","reduce","concat","sort","unshift"],"mappings":"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","file":"meters.js","sourcesContent":["import {\n    blueGrey,\n    indigo,\n    green,\n    deepOrange,\n    brown,\n    amber,\n    orange,\n    blue,\n    lightGreen\n} from \"@material-ui/core/colors\";\n\nconst Meters = {\n    eui: {\n        type: \"eui\",\n        name: \"EUI\",\n        icon: \"account_balance\",\n        color: blueGrey,\n        units: \"kBtu/ft²\",\n        intensityUnits: \"kBtu/ft²\",\n        largeUnits: \"kBtu/ft²\",\n        demandUnits: \"kBtu/ft²/hr\",\n        largeDemandUnits: \"kBtu/ft²/hr\"\n    },\n    energy: {\n        type: \"energy\",\n        name: \"Total Energy\",\n        icon: \"account_balance\",\n        color: blueGrey,\n        units: \"kBtu\",\n        intensityUnits: \"kBtu/ft²\",\n        largeUnits: \"MBtu\",\n        demandUnits: \"kBtu/hr\",\n        largeDemandUnits: \"MBtu/hr\"\n    },\n    electricity: {\n        type: \"electricity\",\n        name: \"Electricity\",\n        icon: \"power\",\n        color: green,\n        units: \"kWh\",\n        intensityUnits: \"kWh/ft²\",\n        largeUnits: \"MWh\",\n        demandUnits: \"kW\",\n        largeDemandUnits: \"MW\"\n    },\n    steam: {\n        type: \"steam\",\n        name: \"Steam\",\n        icon: \"whatshot\",\n        color: deepOrange,\n        units: \"lbs\",\n        intensityUnits: \"lbs/ft²\",\n        largeUnits: \"1,000 lbs\",\n        demandUnits: \"lbs/hr\",\n        largeDemandUnits: \"1,000 lbs/hr\"\n    },\n    ng: {\n        type: \"ng\",\n        name: \"Natural Gas\",\n        icon: \"grain\",\n        color: orange,\n        units: \"Therms\",\n        intensityUnits: \"Therms/ft²\",\n        largeUnits: \"1,000 Therms\",\n        demandUnits: \"Therms/hr\",\n        largeDemandUnits: \"1,000 Therms/hr\"\n    },\n    chw: {\n        type: \"chw\",\n        name: \"Chilled Water\",\n        icon: \"ac_unit\",\n        color: indigo,\n        units: \"TonHrs\",\n        intensityUnits: \"TonHrs/ft²\",\n        largeUnits: \"1,000 TonHrs\",\n        demandUnits: \"Tons\",\n        largeDemandUnits: \"1,000 Tons\"\n    },\n    hw: {\n        type: \"hw\",\n        name: \"Hot Water\",\n        icon: \"invert_colors\",\n        color: amber,\n        units: \"kBtu\",\n        intensityUnits: \"kBtu/ft²\",\n        largeUnits: \"Mbtu\",\n        demandUnits: \"KBtu/hr\",\n        largeDemandUnits: \"MBtu/hr\"\n    },\n    water: {\n        type: \"water\",\n        name: \"Water\",\n        icon: \"opacity\",\n        color: blue,\n        units: \"gals\",\n        intensityUnits: \"gals/ft²\",\n        largeUnits: \"1,000 gals\",\n        demandUnits: \"gals/hr\",\n        largeDemandUnits: \"1,000 gals/hr\"\n    },\n    cost: {\n        type: \"cost\",\n        name: \"Cost\",\n        icon: \"attach_money\",\n        color: lightGreen,\n        units: \"$\",\n        intensityUnits: \"$/ft²\",\n        largeUnits: \"$1,000\",\n        demandUnits: \"$/hr\",\n        largeDemandUnits: \"1,000 $/hr\"\n    },\n    emissions: {\n        type: \"emissions\",\n        name: \"CO2e Emissions\",\n        icon: \"cloud\",\n        color: brown,\n        units: \"lbs CO2e\",\n        intensityUnits: \"lbs CO2e/ft²\",\n        largeUnits: \"1,000 lbs CO2e\",\n        demandUnits: \"CO2e/hr\",\n        largeDemandUnits: \"1,000 CO2e/hr\"\n    }\n};\n\nconst meterOrder = [\n    \"eui\",\n    \"energy\",\n    \"emissions\",\n    \"cost\",\n    \"electricity\",\n    \"steam\",\n    \"ng\",\n    \"chw\",\n    \"hw\",\n    \"water\"\n];\nconst simpleMeter = m => ({\n    _id: m._id,\n    type: m.type,\n    isSubMeter: m.isSubMeter,\n    isVirtualMeter: m.isVirtualMeter,\n    name: m.name,\n    units: m.units\n});\nconst sortMeters = (a, b) =>\n    meterOrder.indexOf(a) < meterOrder.indexOf(b) ? -1 : 1;\nconst getAvailableMeters = (buildings = [], total, emissions, cost) => {\n    let meters = [\n        ...new Set(\n            buildings\n                .map(b => Object.keys((b.data || {}).actual || {}))\n                .reduce((a, b) => a.concat(b), [])\n        )\n    ].sort(sortMeters);\n    if (emissions) meters.unshift(\"emissions\");\n    if (cost) meters.unshift(\"cost\");\n    if (total) meters.unshift(\"energy\");\n    return meters;\n};\n\nexport { Meters, meterOrder, sortMeters, getAvailableMeters, simpleMeter };\n"]}