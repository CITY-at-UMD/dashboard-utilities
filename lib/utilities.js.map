{"version":3,"sources":["../src/utilities.js"],"names":["conversionFactors","electricity","energy","cost","emissions","steam","hw","water","chw","ng","convert","value","meterType","to","units","oil","buildingTypes","spaceTypes","capFirst","string","replace","txt","charAt","toUpperCase","substr","toLowerCase","replaceAll","search","replacement","RegExp","stringifyID","id","String","formatNumber","isNaN","number","parseInt","Math","round","toLocaleString","formatFloat","parseFloat","formatPercent","toURLQuery","concat","Object","keys","obj","map","k","join","parseQueryParams","Map","query","split","s","calcScale","values","filter","v","length","low","high","max","chooseIcon","basename","icon","timeseriesToXY","data","scale","x","Date","y","calcProgress","baseline","normalize","min","normalizeBack","euiTimeScaler","startDate","endDate","valueOf","msyear","validEmail","nr","Boolean","match","calcCVRMSE","actual","simulated","diffArray","actualValues","i","push","pow","n","p","ybar","cvrmse","sqrt","calcNMBE","nmbe","dataStatistics","filterZero","sort","iq","q1","q3","lowerInnerFence","lowerOuterFence","upperInnerFence","upperOuterFence","mean","mode","median","medianAbsoluteDeviation","uniqueCountSorted","standardDeviation","variance","boxPlot","Error","minVal","maxVal","intervalStart","date","interval","t","dateRange","step","range","d","minTimeseries","ts","maxTimeseries","maxTimeseriesWithDate","a","b","cardinalityTimeseries","Set","size","getFirstTimestamp","getLastTimestamp","reduceTimeseries","arrays","reduce","has","set","get","cleanTimeseries","uncleanTimeseries","r","interpolateTimeseries","array","index","prevIndex","prev","slice","reverse","next","cleanTimeseriesInterpolate","avg","filterTimeseries","valuesTimeseries","preAllocateTimeseriesMinutes","o","h","m","TimeseriesArrayToObject","days","groupTimeseries","day","hr","TimeseriesObjectToArray","timestamp","group","aggregateTimeSeries","red","totalTimeseries","averageTimeseries","monthlyValueWithTrend","month","dm","trend","text","baselineValue","isTimeseriesUniform","makeDailyTimeseries","arr","findMissingDays","fullTs","dataDates","missing","calcMeterTotal","type","limit","total","indexOf","hasOwnProperty","calcEUI","area","totalEnergy","calcIntensity","btu","EUIByType","years","Array","fill","getFullYear","byType","sd","year","ed","timeScaler","EUIByYear","baselineYear","types","start","end","progress","calcBuildingEUI","eui","yearStart","yearEnd","monthStart","monthEnd"],"mappings":"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I,W,GAAAA,W;QACAG,Y,GAAAA,Y;QACAO,W,GAAAA,W;QACAE,a,GAAAA,a;QACA+B,Y,GAAAA,Y;QACAE,S,GAAAA,S;QACAE,a,GAAAA,a;QACAC,a,GAAAA,a;QACAS,U,GAAAA,U;QACAa,Q,GAAAA,Q;QACAmB,O,GAAAA,O;QACAY,a,GAAAA,a;QACAE,a,GAAAA,a;QACAS,gB,GAAAA,gB;QACAmB,gB,GAAAA,gB;QACAQ,e,GAAAA,e;QACAM,mB,GAAAA,mB;QACAE,e,GAAAA,e;QACAC,iB,GAAAA,iB;QACAQ,mB,GAAAA,mB;QACAE,e,GAAAA,e;QACAU,O,GAAAA,O;QACAqB,e,GAAAA,e;QACAlB,a,GAAAA,a;QACAE,S,GAAAA,S;QACAU,S,GAAAA,S;QACArB,c,GAAAA,c;QACAjC,0B,GAAAA,0B;QACAzD,c,GAAAA,c;QACArF,U,GAAAA,U;QACAoI,iB,GAAAA,iB;QACAE,qB,GAAAA,qB;QACAjB,qB,GAAAA,qB;QACA4B,gB,GAAAA,gB;QACA/F,c,GAAAA,c;QACAiF,e,GAAAA,e;QACAqC,mB,GAAAA,mB;QACAN,qB,GAAAA,qB;QACAtC,gB,GAAAA,gB;QACAD,iB,GAAAA,iB;QACAuB,4B,GAAAA,4B;QACAI,uB,GAAAA,uB;QACAK,uB,GAAAA,uB","file":"utilities.js","sourcesContent":["import {\n  mean,\n  interquartileRange,\n  quantile,\n  min,\n  max,\n  sum,\n  medianAbsoluteDeviation,\n  modeSorted,\n  medianSorted,\n  uniqueCountSorted,\n  variance,\n  standardDeviation\n} from \"simple-statistics\";\nimport {\n  subYears,\n  getYear,\n  format,\n  addMinutes,\n  addHours,\n  addDays,\n  addMonths,\n  addYears,\n  subMonths,\n  startOfMonth,\n  startOfDay,\n  startOfYear,\n  endOfYear,\n  endOfMonth,\n  endOfDay,\n  differenceInYears,\n  parse,\n  getHours,\n  getMinutes,\n  setHours,\n  setMinutes,\n  setSeconds\n} from \"date-fns\";\n\n// Conversions\nconst conversionFactors = {\n  electricity: {\n    energy: 3.4121416331, // kWh to kBtu\n    cost: 0.111, //$/kWh,\n    emissions: 0.53 //CO2e\n  },\n  steam: {\n    energy: 1.19, // lbs to kBtu,\n    cost: 0.0255, //$/lbs,\n    emissions: 0.1397 //CO2e\n  },\n  hw: {\n    energy: 1, // kBtu to kBtu,\n    cost: 0, //$/kBtu,\n    emissions: 0 //CO2e\n  },\n  water: {\n    energy: 0, // gals to kBtu,\n    cost: 0.019, //$/gal,\n    emissions: 0 //CO2e\n  },\n  chw: {\n    energy: 12, // TonHrs to kBtu,\n    cost: 0.186, //$/TonHr,\n    emissions: 0 //CO2e\n  },\n  ng: {\n    energy: 99.9761, // therm to kBtu,\n    cost: 0, //$/kWh,\n    emissions: 11.7 //therm to lbs CO2e\n  }\n};\nconst convert = (value, meterType, to) => {\n  return value * conversionFactors[meterType][to];\n};\n// Buildings and Meters\nconst units = {\n  electricity: [\"kWh\", \"MWh\", \"MJ\", \"kW\"],\n  steam: [\"lbs\", \"kBtu\", \"btu\"],\n  chw: [\"ton-hr\", \"kBtu\", \"btu\"],\n  ng: [\"therm\", \"ccf\", \"mcf\", \"kBtu\"],\n  oil: [\"gals\", \"barallel\", \"kBtu\", \"btu\"],\n  water: [\"gals\"]\n};\nconst buildingTypes = [\n  \"Office\",\n  \"Residential\",\n  \"Lab\",\n  \"Classroom\",\n  \"Other\",\n  \"Gym\",\n  \"Resaurant\",\n  \"Super Market\",\n  \"Hospital\",\n  \"Mid-Rise Apartment\",\n  \"Hotel\",\n  \"Retail\",\n  \"Warehouse\"\n];\nconst spaceTypes = [\n  \"Dining\",\n  \"Kitchen\",\n  \"Corridor\",\n  \"ER_Exam\",\n  \"ER_NurseStn\",\n  \"ER_Trauma\",\n  \"ER_Triage\",\n  \"ICU_NurseStn\",\n  \"ICU_Open\",\n  \"ICU_PatRm\",\n  \"Lab\",\n  \"Lobby\",\n  \"NurseStn\",\n  \"OR\",\n  \"Office\",\n  \"PatCorridor\",\n  \"PatRoom\",\n  \"PhysTherapy\",\n  \"Radiology\",\n  \"Banquet\",\n  \"Cafe\",\n  \"GuestRoom\",\n  \"Laundry\",\n  \"Mechanical\",\n  \"Retail\",\n  \"Storage\",\n  \"Apartment\",\n  \"Attic\",\n  \"BreakRoom\",\n  \"ClosedOffice\",\n  \"Conference\",\n  \"Elec/MechRoom\",\n  \"IT_Room\",\n  \"OpenOffice\",\n  \"PrintRoom\",\n  \"Restroom\",\n  \"Stair\",\n  \"Vending\",\n  \"Anesthesia\",\n  \"BioHazard\",\n  \"CleanWork\",\n  \"DressingRoom\",\n  \"Exam\",\n  \"Hall\",\n  \"Janitor\",\n  \"LockerRoom\",\n  \"Lounge\",\n  \"MRI\",\n  \"MRI_Control\",\n  \"MedGas\",\n  \"NurseStation\",\n  \"PACU\",\n  \"PhysicalTherapy\",\n  \"PreOp\",\n  \"ProcedureRoom\",\n  \"Soil Work\",\n  \"Toilet\",\n  \"Xray\",\n  \"Cafeteria\",\n  \"Classroom\",\n  \"Gym\",\n  \"Library\",\n  \"Back_Space\",\n  \"Entry\",\n  \"Point_of_Sale\",\n  \"Auditorium\",\n  \"Exercise\",\n  \"GuestLounge\",\n  \"Meeting\",\n  \"PublicRestroom\",\n  \"StaffLounge\",\n  \"WholeBuilding\",\n  \"Bulk\",\n  \"Fine\"\n];\n\n// Formatting\nconst capFirst = (string = \"\") =>\n  string.replace(\n    /\\w\\S*/g,\n    txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  );\nconst replaceAll = (string = \"\", search, replacement) =>\n  string.replace(new RegExp(search, \"g\"), replacement);\nconst stringifyID = id =>\n  id < 10 ? `00${id}` : id < 100 ? `0${id}` : String(id);\nconst formatNumber = number =>\n  isNaN(number) ? \"0\" : parseInt(Math.round(number), 10).toLocaleString();\nconst formatFloat = number =>\n  isNaN(number) ? \"0\" : parseFloat(number).toLocaleString();\nconst formatPercent = number =>\n  isNaN(number) ? \"0\" : formatNumber(number * 100);\nconst toURLQuery = obj =>\n  \"?\".concat(\n    Object.keys(obj)\n      .map(k => [k, obj[k]].join(\"=\"))\n      .join(\"&\")\n  );\nconst parseQueryParams = query =>\n  new Map(\n    query\n      .replace(\"?\", \"\")\n      .split(\"&\")\n      .map(s => s.split(\"=\"))\n  );\n//Map\nconst calcScale = (values, units = \"\") => {\n  values = values.filter(v => v > 0);\n  if (values.length < 1) return { low: 1, high: 2, max: 3 };\n  return {\n    low: parseInt(quantile(values, 0.5), 10),\n    high: parseInt(quantile(values, 0.75), 10),\n    max: parseInt(max(values), 10),\n    units\n  };\n};\nconst chooseIcon = (basename, { low, high }, value) => {\n  let icon = `${basename}-err`;\n  if (!value || !low || !high) return icon;\n  value <= low\n    ? (icon = `${basename}-low`)\n    : value <= high ? (icon = `${basename}-med`) : (icon = `${basename}-high`);\n  return icon;\n};\n//Charting Functions\nconst timeseriesToXY = (data, scale = 1) =>\n  data.map(v => ({\n    x: new Date(v[0]),\n    y: v[1] / scale\n  }));\n// General Functions & Adjustments\nconst calcProgress = (value, baseline) => (value - baseline) / baseline;\nconst normalize = (x, min, max) => (x - min) / (max - min);\nconst normalizeBack = (x, min, max) => x * (max - min) + min;\nconst euiTimeScaler = (startDate, endDate) => {\n  if (isNaN(startDate)) {\n    startDate = new Date(startDate).valueOf();\n  }\n  if (isNaN(endDate)) {\n    endDate = new Date(endDate).valueOf();\n  }\n  let msyear = 31557600000; // 365.25 days\n  return msyear / (endDate - startDate);\n};\nconst validEmail = string => {\n  let nr = new RegExp(\n    // eslint-disable-next-line\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\n  );\n  return Boolean(string.match(nr));\n};\n// Statistics\nconst calcCVRMSE = (actual, simulated) => {\n  var diffArray = [],\n    actualValues = [];\n  for (var i in actual) {\n    diffArray.push(Math.pow(actual[i] - simulated[i], 2));\n    actualValues.push(actual[i]);\n  }\n  var n = diffArray.length,\n    p = 1.0;\n  var ybar = sum(actualValues) / actualValues.length;\n  var cvrmse = Math.sqrt(sum(diffArray) / (n - p)) / ybar;\n  return cvrmse * 100;\n};\nconst calcNMBE = (actual, simulated) => {\n  var diffArray = [],\n    actualValues = [];\n  for (var i in actual) {\n    diffArray.push(actual[i] - simulated[i]);\n    actualValues.push(actual[i]);\n  }\n  var n = diffArray.length,\n    p = 1.0;\n  var ybar = sum(actualValues) / actualValues.length;\n  var nmbe = sum(diffArray) / ((n - p) * ybar);\n  return nmbe * 100;\n};\nconst dataStatistics = (values, filterZero = false) => {\n  if (filterZero) {\n    values = values.filter(v => v > 0);\n  }\n  if (values.length < 2) {\n    // throw new Error('Not Enough Values')\n    return {};\n  }\n  values = values.sort();\n  let iq = interquartileRange(values),\n    q1 = quantile(values, 0.25),\n    q3 = quantile(values, 0.75),\n    lowerInnerFence = q1 - 1.5 * iq,\n    lowerOuterFence = q3 - 3 * iq,\n    upperInnerFence = q1 + 1.5 * iq,\n    upperOuterFence = q3 + 3 * iq;\n  return {\n    iq,\n    q1,\n    q3,\n    lowerInnerFence,\n    lowerOuterFence,\n    upperInnerFence,\n    upperOuterFence,\n    min: min(values),\n    max: max(values),\n    mean: mean(values),\n    mode: modeSorted(values),\n    median: medianSorted(values),\n    medianAbsoluteDeviation: medianAbsoluteDeviation(values),\n    uniqueCountSorted: uniqueCountSorted(values),\n    standardDeviation: standardDeviation(values),\n    variance: variance(values)\n  };\n};\nconst boxPlot = (values, filterZero = false) => {\n  if (filterZero) {\n    values = values.filter(v => v > 0);\n  }\n  if (values.length < 2) {\n    throw new Error(\"not enough values\");\n  }\n  let q1 = quantile(values, 0.25),\n    q3 = quantile(values, 0.75),\n    minVal = min(values),\n    maxVal = max(values);\n  return {\n    q1,\n    q3,\n    min: minVal,\n    max: maxVal\n  };\n};\n\n// Dates\nconst intervalStart = (date, interval) => {\n  //Supported Intervals: day, month, year\n  let t;\n  switch (interval) {\n    case \"day\":\n      t = startOfDay(date);\n      break;\n    case \"month\":\n      t = startOfMonth(date);\n      break;\n    default:\n      t = startOfYear(date);\n  }\n  return t.valueOf();\n};\nconst dateRange = (startDate, endDate, interval, step = 1) => {\n  // Supported Inervals: minutes,hour,day, month, year\n  startDate = parse(startDate);\n  endDate = parse(endDate);\n  let range = [startDate];\n  if (startDate >= endDate) return [];\n  while (range[range.length - 1].valueOf() < endDate.valueOf()) {\n    let d;\n    switch (interval) {\n      case \"minute\":\n        d = addMinutes(range[range.length - 1], step);\n        break;\n      case \"hour\":\n        d = addHours(range[range.length - 1], step);\n        break;\n      case \"day\":\n        d = addDays(range[range.length - 1], step);\n        break;\n      case \"month\":\n        d = addMonths(range[range.length - 1], step);\n        break;\n      default:\n        d = addYears(range[range.length - 1], step);\n    }\n    range.push(d);\n  }\n  return range;\n};\n\n// Timeseries [[dateTime, value, origionalValue], ...]\n// Stats\nconst minTimeseries = ts => min(ts.map(v => v[1]));\nconst maxTimeseries = ts => max(ts.map(v => v[1]));\nconst maxTimeseriesWithDate = ts => ts.sort((a, b) => b[1] - a[1])[0];\nconst cardinalityTimeseries = ts => new Set(ts.map(v => v[1])).size;\nconst getFirstTimestamp = ts => new Date(min(ts.map(v => v[0])));\nconst getLastTimestamp = ts => new Date(max(ts.map(v => v[0])));\n// Reduce\nconst reduceTimeseries = (...arrays) =>\n  [\n    ...arrays.map(a => new Map(a)).reduce((a, b) => {\n      for (var date of b.keys()) {\n        a.has(date)\n          ? a.set(date, b.get(date) + a.get(date))\n          : a.set(date, b.get(date));\n      }\n      return a;\n    }, new Map())\n  ].sort((a, b) => a[0] - b[0]);\n// Cleaning\nconst cleanTimeseries = (data, replacement, min, max) => {\n  data = data.map(\n    v => (v[1] > max || v[1] < min ? [v[0], replacement, v[1]] : v)\n  );\n  return data;\n};\nconst uncleanTimeseries = data => data.map(r => (r[2] ? [r[0], r[2]] : r));\nconst interpolateTimeseries = (array, index) => {\n  let prevIndex = index - 1 < 0 ? 0 : index - 1;\n  let prev = array\n    .slice(0, prevIndex)\n    .filter(v => v[1])\n    .reverse()[0];\n  let next = array.slice(index + 1).filter(v => v[1])[0];\n  return ((prev ? prev[1] : 0) + (next ? next[1] : 0)) / 2;\n};\nconst cleanTimeseriesInterpolate = (data, min, max) => {\n  data = data\n    .map(v => (isNaN(v[1]) ? [v[0], 0, v[1]] : v))\n    .map(v => (v[1] < min ? [v[0], null, v[1]] : v)) //min\n    .map(v => (v[1] > max ? [v[0], null, v[1]] : v)) //max\n    .map((v, i, array) => {\n      if (!v[1]) {\n        let avg = interpolateTimeseries(array, i);\n        return [v[0], avg, v[2]];\n      } else {\n        return v;\n      }\n    }); //interpolate\n  return data;\n};\n// Filtering\nconst filterTimeseries = (data, startDate, endDate) =>\n  data.filter(t => t[0] >= startDate && t[0] <= endDate);\n// Mapping\nconst valuesTimeseries = data => data.map(v => v[1]);\n// Pre Allocate\nconst preAllocateTimeseriesMinutes = () => {\n  let o = {};\n  for (var h = 0; h < 24; h++) {\n    o[h] = {};\n    for (var m = 0; m < 60; m++) {\n      o[h][m] = null;\n    }\n  }\n  return o;\n};\n// const preAllocateTimeseriesSeconds = () => {\n//   let o = {};\n//   for (var h = 0; h < 24; h++) {\n//     o[h] = {};\n//     for (var m = 0; m < 60; m++) {\n//       o[h][m] = {};\n//       for (var s = 0; s < 60; s++) {\n//         o[h][m][s] = null;\n//       }\n//     }\n//   }\n//   return o;\n// };\n// Transform\nconst TimeseriesArrayToObject = data => {\n  let days = groupTimeseries(data, \"day\").map(([day, ts]) => {\n    let obj = preAllocateTimeseriesMinutes();\n    for (var x = 0; x < ts.length; x++) {\n      let hr = getHours(ts[x][0]),\n        m = getMinutes(ts[x][0]);\n      obj[hr][m] = ts[x][1];\n    }\n    return [day, obj];\n  });\n  return days;\n};\nconst TimeseriesObjectToArray = (data, timestamp) => {\n  let array = Object.keys(data)\n    .map(h =>\n      Object.keys(data[h]).map(m =>\n        Object.keys(\n          data[h][m].map(s => [\n            setHours(setMinutes(setSeconds(timestamp, s), m), h),\n            data[h][m]\n          ])\n        )\n      )\n    )\n    .reduce((a, b) => a.concat(b))\n    .sort((a, b) => a[0].valueOf() - b[0].valueOf());\n  return array;\n};\n// Grouping\nconst groupTimeseries = (data, interval) => {\n  //Supported Intervals: day, month, year\n  let group = data.map(v => [parse(v[0]).valueOf(), v[1]]).reduce((a, b) => {\n    let t = intervalStart(b[0], interval);\n    if (a.has(t)) {\n      a.set(t, [...a.get(t), b]);\n    } else {\n      a.set(t, [b]);\n    }\n    return a;\n  }, new Map());\n  return [...group];\n};\n// Aggregation\nconst aggregateTimeSeries = (data, interval) => {\n  //Supported Intervals: day, month, year\n  let red = data.map(v => [parse(v[0]), v[1]]).reduce((a, b) => {\n    let ts = intervalStart(b[0], interval);\n    if (!a.has(ts)) {\n      a.set(ts, b[1]);\n    } else {\n      a.set(ts, a.get(ts) + b[1]);\n    }\n    return a;\n  }, new Map());\n  data = [...red].map(v => [new Date(v[0]).valueOf(), v[1]]);\n  return data;\n};\nconst totalTimeseries = data => data.map(a => a[1]).reduce((a, b) => a + b, 0);\nconst averageTimeseries = data => mean(data.map(v => v[1]));\nconst monthlyValueWithTrend = (data, units, month, baseline) => {\n  let dm = new Map(data);\n  if (!dm.has(month.valueOf())) {\n    return { value: 0, trend: { value: null, text: \"\" } };\n  }\n  let value = dm.get(month.valueOf()),\n    baselineValue = dm.get(baseline.valueOf()) || 0;\n  return {\n    value,\n    units,\n    trend: {\n      value: calcProgress(value, baselineValue) * 100,\n      text: `${format(baseline, \"MMM YYYY\")}`\n    }\n  };\n};\n// ETC\nconst isTimeseriesUniform = data => cardinalityTimeseries(data) < 3;\nconst makeDailyTimeseries = (date, value, interval, step) => {\n  let range = dateRange(date, endOfDay(date), interval);\n  let data = range.map((d, i, arr) => [d.valueOf(), value / arr.length]);\n  return data;\n};\nconst findMissingDays = (data, { startDate, endDate } = {}) => {\n  // Sort Data\n  data = data.sort((a, b) => a[0] - b[0]);\n  // Set Default Start Dates\n  if (!startDate) {\n    startDate = data[0][0];\n  }\n  if (!endDate) {\n    endDate = data[data.length - 1][0];\n  }\n  let range = dateRange(startDate, endDate, \"day\");\n  let fullTs = new Set(range.map(d => d.valueOf()));\n  let dataDates = new Set(data.map(d => d[0]));\n  let missing = new Set([...fullTs].filter(d => !dataDates.has(d)));\n  return [...missing];\n};\n\n// Energy\nconst calcMeterTotal = (data, type, startDate, endDate, limit = []) => {\n  let total = Object.keys(data)\n    .filter(k => limit.indexOf(k) === -1)\n    .filter(k => conversionFactors.hasOwnProperty(k) && data[k].length > 0)\n    .map((k, i) =>\n      filterTimeseries(data[k], startDate, endDate).map(v => [\n        v[0],\n        convert(v[1], k, type)\n      ])\n    )\n    .reduce((a, b) => reduceTimeseries(a, b), []);\n  return total;\n};\nconst calcEUI = (data, area, startDate, endDate, limit = []) => {\n  let totalEnergy = totalTimeseries(\n    calcMeterTotal(data, \"energy\", startDate, endDate, limit)\n  );\n  return totalEnergy / area * euiTimeScaler(startDate, endDate);\n};\nconst calcIntensity = (\n  data,\n  type,\n  area,\n  startDate,\n  endDate,\n  limit = [],\n  btu = false\n) => {\n  if ([\"energy\", \"emissions\", \"cost\"].indexOf(type) !== -1) {\n    let totalEnergy = totalTimeseries(\n      calcMeterTotal(data, type, startDate, endDate, limit)\n    );\n    return totalEnergy / area * euiTimeScaler(startDate, endDate);\n  } else {\n    if (!data.hasOwnProperty(type)) return 0;\n    let total = totalTimeseries(\n      filterTimeseries(data[type], startDate, endDate)\n    );\n    let value = total / area * euiTimeScaler(startDate, endDate);\n    return btu ? convert(value, type, \"energy\") : value;\n  }\n};\n\nconst EUIByType = (data, area, startDate, endDate, limit = []) => {\n  let years = new Array(differenceInYears(endDate, startDate) + 1)\n    .fill(0)\n    .map((v, i) => {\n      let y = new Date(startDate.getFullYear() + i, 0);\n      return [y, startOfMonth(endOfYear(y))];\n    });\n  let byType = Object.keys(data)\n    .filter(\n      k =>\n        conversionFactors.hasOwnProperty(k) &&\n        conversionFactors[k].energy > 0 &&\n        limit.indexOf(k) === -1\n    )\n    .map((k, i) =>\n      years.map(year => {\n        let sd = year[0].valueOf();\n        let ed = year[1].valueOf();\n        if (ed > endDate.valueOf()) {\n          ed = endDate.valueOf();\n          sd = startOfMonth(subMonths(ed, 11)).valueOf();\n        }\n        let timeScaler = euiTimeScaler(sd, ed);\n        let value = convert(\n          totalTimeseries(filterTimeseries(data[k], sd, ed)) *\n            timeScaler /\n            area,\n          k,\n          \"energy\"\n        );\n        return {\n          type: k,\n          year: new Date(getYear(ed), 0).valueOf(),\n          value\n        };\n      })\n    );\n  return byType;\n};\nconst EUIByYear = (\n  data,\n  area,\n  startDate,\n  endDate,\n  limit = [],\n  baselineYear\n) => {\n  let years = new Array(differenceInYears(endDate, startDate) + 1)\n    .fill(0)\n    .map((v, i) => {\n      let y = new Date(startDate.getFullYear() + i, 0);\n      return [y, startOfMonth(endOfYear(y))];\n    });\n  let types = Object.keys(data).filter(\n    k =>\n      conversionFactors.hasOwnProperty(k) &&\n      conversionFactors[k].energy > 0 &&\n      limit.indexOf(k) === -1\n  );\n  let baseline = new Map(\n    types.map(t => [\n      t,\n      calcIntensity(\n        data,\n        t,\n        area,\n        baselineYear.valueOf(),\n        startOfMonth(endOfYear(baselineYear)).valueOf(),\n        limit,\n        true\n      )\n    ])\n  );\n  years = years.map(([start, end]) => [\n    start.valueOf(),\n    types.map(t => {\n      let value = calcIntensity(\n        data,\n        t,\n        area,\n        start.valueOf(),\n        end.valueOf(),\n        limit,\n        true\n      );\n      return {\n        type: t,\n        progress: calcProgress(value, baseline.get(t)),\n        value\n      };\n    })\n  ]);\n  return years;\n};\nconst calcBuildingEUI = (data, area) => {\n  let eui;\n  if (!data || !area) {\n    eui = {\n      year: 0,\n      month: 0\n    };\n  } else {\n    let yearStart = startOfYear(subYears(new Date(), 1)),\n      yearEnd = endOfYear(yearStart),\n      monthStart = startOfMonth(subMonths(new Date(), 2)),\n      monthEnd = endOfMonth(monthStart);\n    eui = {\n      year: calcEUI(data, area, yearStart, yearEnd) || 0,\n      month: calcEUI(data, area, monthStart, monthEnd) || 0\n    };\n  }\n  return eui;\n};\n\nexport {\n  calcScale,\n  chooseIcon,\n  validEmail,\n  toURLQuery,\n  parseQueryParams,\n  conversionFactors,\n  units,\n  buildingTypes,\n  convert,\n  capFirst,\n  replaceAll,\n  stringifyID,\n  formatNumber,\n  formatFloat,\n  formatPercent,\n  calcProgress,\n  normalize,\n  normalizeBack,\n  euiTimeScaler,\n  calcCVRMSE,\n  calcNMBE,\n  boxPlot,\n  minTimeseries,\n  maxTimeseries,\n  reduceTimeseries,\n  filterTimeseries,\n  groupTimeseries,\n  aggregateTimeSeries,\n  totalTimeseries,\n  averageTimeseries,\n  makeDailyTimeseries,\n  findMissingDays,\n  calcEUI,\n  calcBuildingEUI,\n  calcIntensity,\n  EUIByType,\n  EUIByYear,\n  calcMeterTotal,\n  cleanTimeseriesInterpolate,\n  dataStatistics,\n  spaceTypes,\n  uncleanTimeseries,\n  interpolateTimeseries,\n  maxTimeseriesWithDate,\n  valuesTimeseries,\n  timeseriesToXY,\n  cleanTimeseries,\n  isTimeseriesUniform,\n  monthlyValueWithTrend,\n  getLastTimestamp,\n  getFirstTimestamp,\n  preAllocateTimeseriesMinutes,\n  TimeseriesArrayToObject,\n  TimeseriesObjectToArray\n};\n"]}